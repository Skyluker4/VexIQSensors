#pragma config(UserModel, "Device Configuration.h")
//Code automatically generated by 'ROBOTC' configuration wizard!!
//Developed by Luke A. Simmons

string lowerCase = "";

void toLower(const string inString){
	lowerCase = "";
	const int length = strlen(inString);
	char in[15] = inString;
	for(int a = 0; a < length; a++){
		if(in[a] <= 'Z' && in >= 'A'){
			char new = in-('Z'-'z');
			lowerCase += new;
			}else{
			lowerCase += in;
		}
	}
}

void goToDistance(float goHere, float speed, const string type, const string vertical){
	toLower(vertical);
	if(lowerCase == "forward"){
		toLower(type);
		if(lowerCase == "distance" || lowerCase == "distancemm" || lowerCase == "distancesensor" || lowerCase == "distance mm" || lowerCase == "ditance sensor"){
			if(getDistanceValue(distanceMM) >= goHere){
				repeatUntil(getDistanceValue(distanceMM) == goHere){
					setMultipleMotors(speed, leftMotor, rightMotor);
				}
				}else if(lowerCase == "color" || lowerCase == "colorsensor" || lowerCase == "color sensor" || lowerCase == "colordistance" || lowerCase == "color distance"){
				repeatUntil(getColorProximity(colorDetector) >= goHere - 10 && getColorProximity(colorDetector) <= goHere + 10){
					setMultipleMotors(speed, leftMotor, rightMotor);
				}
			}
			}else if(getDistanceValue(distanceMM) < goHere){
			repeatUntil(getDistanceValue(distanceMM) == goHere){
				setMultipleMotors(-speed, leftMotor, rightMotor);
			}
			}else if(lowerCase == "color" || lowerCase == "colorsensor" || lowerCase == "color sensor" || lowerCase == "colordistance" || lowerCase == "color distance"){
			repeatUntil(getColorProximity(colorDetector) >= goHere - 10 && getColorProximity(colorDetector) <= goHere + 10){
				setMultipleMotors(-speed, leftMotor, rightMotor);
			}
		}
		}else if (lowerCase == "backward" || lowerCase == "backwards"){
		toLower(type);
		if(lowerCase == "distance" || lowerCase == "distancemm" || lowerCase == "distancesensor" || lowerCase == "distance mm" || lowerCase == "ditance sensor"){
			if(getDistanceValue(distanceMM) >= goHere){
				repeatUntil(getDistanceValue(distanceMM) == goHere){
					setMultipleMotors(-speed, leftMotor, rightMotor);
				}
				}else if(lowerCase == "color" || lowerCase == "colorsensor" || lowerCase == "color sensor" || lowerCase == "colordistance" || lowerCase == "color distance"){
				repeatUntil(getColorProximity(colorDetector) >= goHere - 10 && getColorProximity(colorDetector) <= goHere + 10){
					setMultipleMotors(-speed, leftMotor, rightMotor);
				}
			}
			}else if(getDistanceValue(distanceMM) < goHere){
			repeatUntil(getDistanceValue(distanceMM) == goHere){
				setMultipleMotors(speed, leftMotor, rightMotor);
			}
			}else if(lowerCase == "color" || lowerCase == "colorsensor" || lowerCase == "color sensor" || lowerCase == "colordistance" || lowerCase == "color distance"){
			repeatUntil(getColorProximity(colorDetector) >= goHere - 10 && getColorProximity(colorDetector) <= goHere + 10){
				setMultipleMotors(speed, leftMotor, rightMotor);
			}
		}
	}
	stopMultipleMotors(leftMotor, rightMotor);
}

//(goHere - first)
/*void goDistance(float goHere, float speed, const string type, const string vertical){
toLower(vertical);
if(lowerCase == "forward"){
toLower(type);
if(lowerCase == "distance" || lowerCase == "distancemm" || lowerCase == "distancesensor" || lowerCase == "distance mm" || lowerCase == "ditance sensor"){
int first = getDistanceValue(distanceMM);
if(getDistanceValue(distanceMM) >= goHere){
repeatUntil(getDistanceValue(distanceMM) == goHere - first){
setMultipleMotors(speed, leftMotor, rightMotor);
}
}else if(lowerCase == "color" || lowerCase == "colorsensor" || lowerCase == "color sensor" || lowerCase == "colordistance" || lowerCase == "color distance"){
int first = getColorProximity(colorDetector);
repeatUntil(getColorProximity(colorDetector) >= (goHere - first) - 10 && getColorProximity(colorDetector) <= (goHere - first) + 10){
setMultipleMotors(speed, leftMotor, rightMotor);
}
}
}else if(getDistanceValue(distanceMM) < goHere){
repeatUntil(getDistanceValue(distanceMM) == goHere - first){
setMultipleMotors(-speed, leftMotor, rightMotor);
}
}else if(lowerCase == "color" || lowerCase == "colorsensor" || lowerCase == "color sensor" || lowerCase == "colordistance" || lowerCase == "color distance"){
repeatUntil(getColorProximity(colorDetector) >= goHere - 10 && getColorProximity(colorDetector) <= goHere + 10){
setMultipleMotors(-speed, leftMotor, rightMotor);
}
}
}else if (lowerCase == "backward" || lowerCase == "backwards"){
toLower(type);
if(lowerCase == "distance" || lowerCase == "distancemm" || lowerCase == "distancesensor" || lowerCase == "distance mm" || lowerCase == "ditance sensor"){
if(getDistanceValue(distanceMM) >= goHere){
repeatUntil(getDistanceValue(distanceMM) == goHere){
setMultipleMotors(-speed, leftMotor, rightMotor);
}
}else if(lowerCase == "color" || lowerCase == "colorsensor" || lowerCase == "color sensor" || lowerCase == "colordistance" || lowerCase == "color distance"){
repeatUntil(getColorProximity(colorDetector) >= goHere - 10 && getColorProximity(colorDetector) <= goHere + 10){
setMultipleMotors(-speed, leftMotor, rightMotor);
}
}
}else if(getDistanceValue(distanceMM) < goHere){
repeatUntil(getDistanceValue(distanceMM) == goHere){
setMultipleMotors(speed, leftMotor, rightMotor);
}
}else if(lowerCase == "color" || lowerCase == "colorsensor" || lowerCase == "color sensor" || lowerCase == "colordistance" || lowerCase == "color distance"){
repeatUntil(getColorProximity(colorDetector) >= goHere - 10 && getColorProximity(colorDetector) <= goHere + 10){
setMultipleMotors(speed, leftMotor, rightMotor);
}
}
}
stopMultipleMotors(leftMotor, rightMotor);
}
*/
